{
    "D1"    : "Security mainly depends on capacity parameter, which determins the collision probability (and security is half the capacity bits).",
    "m0"    : "0x69cb",
    "c0"    : 448,
    "hash0" : "0x94bd25c4cf6ca889126df37ddd9c36e6a9b28a4fe15cc3da6debcdd7",

    "D2"     : "The collision happens because of how the sponge function works. The first message is 400B long (double the size of 'r'). So first it will take 200B, xor it with 'r' and apply 'f'. Then the same happens to the other 200B. This means that the current state is based on the last state. Reading the last state before applying 'f', we can use it as a second message and just 'skip' the first absorbtion. Hash length does not matter as we only take first n bits depending on the hash size we want." ,
    "m1"     : "0x
    "m2"     : "0xe7dde140798f25f18a47c033f9ccd584eea95aa61e2698d54d49806f304715bd57d05362054e288bd46f8e7f2da497ffc44746a4a0e5fe90762e19d60cda5b8c9c05191bf7a630ad64fc8fd0b75a933035d617233fa95aeb0321710d26e6a6a95f55cfdb167ca58126c84703cd31b8439f56a5111a2ff20161aed9215a63e505f270c98cf2febe641166c47b95703661cb0ed04f555a7cb8c832cf1c8ae83e8c14263aae22790c94e409c5a224f94118c26504e72635f5163ba1307fe944f67549a2ec5c7bfff1ea",
    "c12"    : 0,
    "hash12" : "0x3c9f5c6b4a247d36f482cd3967d232807fb2e040237c1005412804554f888e85b5ad7776f153146f9c7fefb78a4cd34cf83e504d0ab463e4cc1e9613038a34e52fe0823b7685444792a2ab6d15335ee26ddfaf91c224cd8801233f535860167afffdf3bffe2b3eaf03f087d4ad72c9f03c8c5ff063e5245d270577d90f484e8089a6cb0e0d61e4d2d7f14c0d90c38f6b2fd1d73e35a95570a0fc10398725e19d0643c76e00c5413d17ab82caa5bb9e9042ba6ac757604396cadcd686ff106e1af9d31a1919a72830",

    "D3"     : "I used brute-force. Starting with a message (<200B) I keep generating hashes (next message) and storing the internal state of absorbtion. All I need to do is check, if state with this 'c' (last 32 bits) was already generated by some other message. If so, I can 'add' some suffix to the current message, xoring it with the state, getting the next xor. Xoring this xor value with our second message state, we get suffix for the second message. msg1 + suffix1 and msg2 + suffix2 will no generate the same hash",
    "m3"     : "0x1428accae44db6a3f21569aa40c6a6905ea01e22d5fdf742aa42d09b198dc956996f27f863409ed86a311591f2a5be0c9804970937f796434ad614ae2dc7a115043b64af31589d576a0664dbd24354cacc3b25dbeee844d8ee5446a051c868806d5e2944b63e6db7afe2d42a8d2e7dd7bd6f2dc8f928e652582c2443142e8bae6ec522ac3d283ee121dce99993badf35dedccc0ba59bc968855436c8a9eee0a293fd1ecbd13bc10287c9972cdf7025790072a61b121fb6603c2fe8ddf7c26ae7185d063700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "m4"     : "0xc27c54d0650421c54100944197a1b9e85614b92684196b0ee4349b1b6cf3f7a9ace2bdaed0d337b02ec1bbfe9e078878644a912b2311926a168fd28ceffda6b8df8322c9fa7e9ee73c10f5906ea7f49ce20e3f04cf941917a5032ab122f176f085ef888dfbe15892193cd3bef1a9048fe935c852514e7a5575c3e50e0cfcfeac9cef14fcd3efa2c347da4444746656d6bbbeb66800d57636a9ea44407f002ea524e84e1509378b800f02e06f159610a4be71051d1a1bec1f3766d917d6e35fc5bb40bd7559c41cb7d655405ebb00d61cfcea4a60dc45b989d83dc2b71b56991f971a8169f893f4ef19a2b5b2d51469f30fb9c9a4bfe66f3ac96ed52e897d79fa89be506e315c70cf09b660aaa0123246755f1acb826874982c95b3f8eb6b27276f6b8af8cf2f04fc9263c6da6473124a787cfcbc6ceee31ed8768a2a9801f2dc214bac1c67a1ff67cd467616204a5352174fcd9505256018d5701c9b9f7c16a8a1bc1fbc35455f27047da5a75b4791dd4d2082a918dee26cb59ffcf07e8e27cbd50b048ecb750000000000",
    "c34"    : 40,
    "hash34" : "0x44a2c49831e94f1a8bf8b853ba230db388157ef6c255b87e6aa72b609a08bd5ed9397dccaa68404e6933b76685510c6afcc22484c34ac9e9d211a461122e05c2e54e04223257f90ae7737ba3b41eba7813e6618ca7f0ce42721a01e343565db30704a17a40088ab8aac73c81ec94fff1a1095d25042dc581fbd84fe5825361b4e27da5f44517d168183f8077e5fd69ab20a7bfcf25f4bcc29f26ea38d2ec3c36a670231e5271efcc2456e69ea63485d62178f0f08343f34a504ae8487a703cea248dd3",

    "max"    : 857,
    "min"    : 735,
    "avg"    : 799.67625
}